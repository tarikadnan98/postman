{
  "info": {
    "_postman_id": "ff27ce5e-8400-4b20-84dd-5c190b1fbb27",
    "name": "Jenkins_Integration",
    "description": "Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.\n\nThe documentation for the endpoints as well as example responses can be found at [https://postman-echo.com](https://postman-echo.com/?source=echo-collection-app-onboarding)",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Request Methods",
      "item": [
        {
          "name": "GET Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33e2a9da-cd6e-4d9e-a6bb-da93427d60a2",
                "exec": [
                  "var responseJSON;",
                  "",
                  "try { ",
                  "    responseJSON = JSON.parse(responseBody); ",
                  "    tests['response is valid JSON'] = true;",
                  "}",
                  "catch (e) { ",
                  "    responseJSON = {}; ",
                  "    tests['response is valid JSON'] = false;",
                  "}",
                  "",
                  "tests['response json contains headers'] = _.has(responseJSON, 'headers');",
                  "tests['response json contains args'] = _.has(responseJSON, 'args');",
                  "tests['response json contains url'] = _.has(responseJSON, 'url');",
                  "",
                  "tests['args key contains argument passed as url parameter'] = ('test' in responseJSON.args);",
                  "tests['args passed via request url params has value \"123\"'] = (_.get(responseJSON, 'args.test') === \"123\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ab2bb9e8-2951-429d-b691-793758e6d765",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://postman-echo.com/get?test=123",
              "protocol": "https",
              "host": [
                "postman-echo",
                "com"
              ],
              "path": [
                "get"
              ],
              "query": [
                {
                  "key": "test",
                  "value": "123"
                }
              ]
            },
            "description": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested."
          },
          "response": []
        },
        {
          "name": "GET Request Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7657282a-700f-4ec0-99bf-87853dc0a275",
                "exec": [
                  "var responseJSON;",
                  "",
                  "try { ",
                  "    responseJSON = JSON.parse(responseBody); ",
                  "    tests['response is valid JSON'] = true;",
                  "}",
                  "catch (e) { ",
                  "    responseJSON = {}; ",
                  "    tests['response is valid JSON'] = false;",
                  "}",
                  "",
                  "tests['response json contains headers'] = _.has(responseJSON, 'headers');",
                  "tests['response json contains args'] = _.has(responseJSON, 'args');",
                  "tests['response json contains url'] = _.has(responseJSON, 'url');",
                  "",
                  "tests['args key contains argument passed as url parameter'] = ('test' in responseJSON.args);",
                  "tests['args passed via request url params has value \"123\"'] = (_.get(responseJSON, 'args.test') === \"123\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ecd2ada6-8647-40ba-aa52-ebf4e966a7ce",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://postman-echo.com/get?test=123",
              "protocol": "https",
              "host": [
                "postman-echo",
                "com"
              ],
              "path": [
                "get"
              ],
              "query": [
                {
                  "key": "test",
                  "value": "123"
                }
              ]
            },
            "description": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested."
          },
          "response": []
        },
        {
          "name": "POST Form Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON;",
                  "",
                  "try { ",
                  "    responseJSON = JSON.parse(responseBody); ",
                  "    tests['response is valid JSON'] = true;",
                  "}",
                  "catch (e) { ",
                  "    responseJSON = {}; ",
                  "    tests['response is valid JSON'] = false;",
                  "}",
                  "",
                  "",
                  "tests['response has post data'] = _.has(responseJSON, 'form');",
                  "tests['response matches the data posted'] = (responseJSON.form && responseJSON.form.strange === 'boom');"
                ],
                "id": "edf11259-39e3-44fd-b58d-55f075825c7b"
              }
            }
          ],
          "_postman_id": "4b878f01-95d6-422a-acd5-8335b96203c6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "strange",
                  "value": "boom",
                  "type": "text"
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "https://postman-echo.com/post",
            "description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter."
          },
          "response": []
        },
        {
          "name": "PUT Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON;",
                  "",
                  "try { ",
                  "    responseJSON = JSON.parse(responseBody); ",
                  "    tests['response is valid JSON'] = true;",
                  "}",
                  "catch (e) { ",
                  "    responseJSON = {}; ",
                  "    tests['response is valid JSON'] = false;",
                  "}",
                  "",
                  "",
                  "tests['response has PUT data'] = _.has(responseJSON, 'data');",
                  "tests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);"
                ],
                "id": "c46dbb5e-65ef-4d19-b452-71b2fe49785b"
              }
            }
          ],
          "_postman_id": "c80a0590-41e6-44a7-b9e5-1966121f0ae4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "Etiam mi lacus, cursus vitae felis et, blandit pellentesque neque. Vestibulum eget nisi a tortor commodo dignissim.\nQuisque ipsum ligula, faucibus a felis a, commodo elementum nisl. Mauris vulputate sapien et tincidunt viverra. Donec vitae velit nec metus.",
              "options": {
                "raw": {}
              }
            },
            "url": "https://postman-echo.com/put",
            "description": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n"
          },
          "response": []
        },
        {
          "name": "POST Raw Text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON;",
                  "",
                  "try { ",
                  "    responseJSON = JSON.parse(responseBody); ",
                  "    tests['response is valid JSON'] = true;",
                  "}",
                  "catch (e) { ",
                  "    responseJSON = {}; ",
                  "    tests['response is valid JSON'] = false;",
                  "}",
                  "",
                  "",
                  "tests['response has post data'] = _.has(responseJSON, 'data');",
                  "tests['response matches the data posted'] = (responseJSON.data && responseJSON.data.length === 256);",
                  "",
                  "tests[\"content-type equals text/plain\"] = responseJSON && responseJSON.headers && (responseJSON.headers[\"content-type\"] === 'text/plain');"
                ],
                "id": "9b9dea39-a7bd-49ac-98d3-6dc5b172fa99"
              }
            }
          ],
          "_postman_id": "10d4b269-9cde-401a-9f80-6102df5624a5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium. Praesent neque quam, tincidunt nec leo eget, rutrum vehicula magna.\nMaecenas consequat elementum elit, id semper sem tristique et. Integer pulvinar enim quis consectetur interdum volutpat.",
              "options": {
                "raw": {}
              }
            },
            "url": "https://postman-echo.com/post",
            "description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested."
          },
          "response": []
        },
        {
          "name": "DELETE Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON;",
                  "",
                  "try { ",
                  "    responseJSON = JSON.parse(responseBody); ",
                  "    tests['response is valid JSON'] = true;",
                  "}",
                  "catch (e) { ",
                  "    responseJSON = {}; ",
                  "    tests['response is valid JSON'] = false;",
                  "}",
                  "",
                  "",
                  "tests['response has PUT data'] = _.has(responseJSON, 'data');",
                  "tests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);"
                ],
                "id": "326e450b-ccec-4e63-8b0e-60bc72aea432"
              }
            }
          ],
          "_postman_id": "4ac97e15-b3e1-4ffe-a2bc-71282031afc1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "Donec fermentum, nisi sed cursus eleifend, nulla tortor ultricies tellus, ut vehicula orci arcu ut velit. In volutpat egestas dapibus.\nMorbi condimentum vestibulum sapien. Etiam dignissim diam quis eros lobortis gravida vel lobortis est. Etiam gravida sed.",
              "options": {
                "raw": {}
              }
            },
            "url": "https://postman-echo.com/delete",
            "description": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
          },
          "response": []
        },
        {
          "name": "PATCH Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var responseJSON;",
                  "",
                  "try { ",
                  "    responseJSON = JSON.parse(responseBody); ",
                  "    tests['response is valid JSON'] = true;",
                  "}",
                  "catch (e) { ",
                  "    responseJSON = {}; ",
                  "    tests['response is valid JSON'] = false;",
                  "}",
                  "",
                  "",
                  "tests['response has PUT data'] = _.has(responseJSON, 'data');",
                  "tests['response matches the data sent in request'] = (responseJSON.data && responseJSON.data.length === 256);"
                ],
                "id": "f72056cc-777a-46a5-acc9-8bbe281d8076"
              }
            }
          ],
          "_postman_id": "69483512-4bdf-4bf5-a7b4-487aff8abe6c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "Curabitur auctor, elit nec pulvinar porttitor, ex augue condimentum enim, eget suscipit urna felis quis neque.\nSuspendisse sit amet luctus massa, nec venenatis mi. Suspendisse tincidunt massa at nibh efficitur fringilla. Nam quis congue mi. Etiam volutpat.",
              "options": {
                "raw": {}
              }
            },
            "url": "https://postman-echo.com/patch",
            "description": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body."
          },
          "response": []
        }
      ],
      "_postman_id": "9c0b4db7-75e8-4058-a097-7195ed09669b",
      "description": "HTTP has multiple request \"verbs\", such as `GET`, `PUT`, `POST`, `DELETE`,\n`PATCH`, `HEAD`, etc. \n\nAn HTTP Method (verb) defines how a request should be interpreted by a server. \nThe endpoints in this section demonstrate various HTTP Verbs. Postman supports \nall the HTTP Verbs, including some rarely used ones, such as `PROPFIND`, `UNLINK`, \netc.\n\nFor details about HTTP Verbs, refer to [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9)\n"
    }
  ]
}